\input texinfo
@setfilename smartcalc.info
@documentencoding UTF-8

@settitle Smartcalc-v2.0

@afourpaper

@copying
Copyright © 2023 School 21
@end copying


@titlepage
@title Smartcalc-v2.0
@subtitle Implementation of the calculator in C++ using the qt6.6 framework.
@author Carmine Cartman

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@headings off

@contents

@ifnottex
@node Top
@top Smartcalc example
@insertcopying
@end ifnottex

@menu
* Introduction :: Subject
* Usage ::              
@end menu

@node Introduction
@chapter Subject

@cindex intro
The SmartCalc v1.0 program must be implemented:
@itemize *


@item The program must be developed in C++ language of C++17 standard
@item When writing code it is necessary to follow the Google style
@item Classes must be implemented within the s21 namespace
@item Prepare full coverage of expression calculation modules with unit-tests using the GTest library
@item The program must be built with Makefile which contains standard set of targets for GNU-programs: all, install, uninstall, clean, dvi, dist, test, gcov_report. Installation directory could be arbitrary, except the building one
@item The program must be developed according to the principles of structured programming
@item When writing code it is necessary to follow the Google style
@item Prepare full coverage of modules related to calculating expressions with unit-tests using the Check library
@item The program must be built with Makefile which contains standard set of targets for GNU-programs: all, install, uninstall, clean, dvi, dist, tests. Installation directory could be arbitrary
@item GUI implementation, based on any GUI library with API for C++17:
@item    For Linux: GTK+, CEF, Qt, JUCE
@item    For Mac: GTK+, CEF, Qt, JUCE, SFML, Nanogui, Nngui
@item The program must be implemented using the MVC pattern, and also:
@item     there should be no business logic code in the view code
@item     there should be no interface code in the controller and the model
@item     controllers must be thin
@item Both integers and real numbers with a dot can be input into the program. You can optionally provide the input of numbers in exponential notation
@item The calculation must be done after you complete entering the calculating expression and press the = symbol.
@item Calculating arbitrary bracketed arithmetic expressions in infix notation
@item Calculate arbitrary bracketed arithmetic expressions in infix notation with substitution of the value of the variable x as a number
@item Plotting a graph of a function given by an expression in infix notation with the variable x (with coordinate axes, mark of the used scale and an adaptive grid)
@item It is not necessary to provide the user with the ability to change the scale
@item Domain and codomain of a function are limited to at least numbers from -1000000 to 1000000
@item To plot a graph of a function it is necessary to additionally specify the displayed domain and codomain
@item Verifiable accuracy of the fractional part is at least to 7 decimal places
Users must be able to enter up to 255 characters
Bracketed arithmetic expressions in infix notation must support the following arithmetic operations and mathematical functions
@enumerate
@item Brackets:       ( )
@item Addition:       a + b          
@item Subtraction:    a - b
@item Multiplication: a * b
@item Division:       a / b
@item Power:          a ^ b
@item Modulus:        a mod b
@item Unary_plus:     +a
@item Unary minus:    -a
@item cosine: cos(x)
@item sine: sin(x)
@item tangent: tan(x)
@item arc cosine: acos(x)
@item arc sine: asin(x)
@item arc tangent: atan(x)
@item square root: sqrt(x)
@item natural logarithm: ln(x)
@item common logarith: log(x)
@end enumerate

@end itemize


@node Usage
@chapter Usage

@itemize *
@item Libsmartcalc

@itemize -
@item A library for calculating mathematical expressions in infix notation.
@item Supports unary operators:
@enumerate
@item minus `-` and plus `+`;
@item binary operators: addition `+`, subtraction `-`, multiplication `*`, division `\`, exponentiation `^` and remainder `mod`;
@item as well as functions: sine `sin`, cosine `cos`, tangent `tan`,
@item arcsine `asin`, arcosine `acos`, arctangent `atan`, natural logarithm `ln`,
@item decimal logarithm `log` and square root `sqrt`;
@item as well as an arbitrary number of parentheses `()`.
@end enumerate
@item `make` to compile the library;
@item `test` to run unit tests;
@item `gcov_report` to get a coverage report.

@item Appsmartcalc

@itemize -
@item GUI Application for the libsmartcalc library using the QT 6.2.3 framework.
@item The application has three operating modes:
@item Calculator:
@itemize -
@item  Evaluate arithmetic expressions "expr";
@item  Set variables "var varname = expr";
@item  Define new functions "func funcname = expr";
@item  To get the result, press the 'Run' button or the 'return' key
@end itemize
@image{./docs/misc/sc_1,400pt,200pt,,.eps}

@item Plot:
@itemize -
@item Select a function from the list;
@item Set the boundaries of the definition area and the value area;
@item Сlick the `draw` button
@end itemize
@image{./docs/misc/sc_2,400pt,200pt,,.eps}

@item Credit:
@itemize -
@item The loan calculator allows you to calculate monthly payment,overpayment on credit, total payment 
@end itemize
@image{./docs/misc/sc_3,400pt,200pt,,.eps}
@end itemize
@end itemize

@bye
